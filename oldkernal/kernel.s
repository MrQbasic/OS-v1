	jmp start
	db "THIS IS THE KERNEL MADE BY LEON"
[org 0x1000]
[bits 16]
start:	
	call check
	call screen_print_clear
	call minimon
	call os_main
jmp $

%include "./check.s"
%include "./screen_print.s"
%include "./grapics.s"
%include "./math.s"
%include "./os.s"
%include "./minimon.s"
%include "./pit.s"
%include "./sound.s"
%include "./3d.s"
%include "./keyb.s"
%include "./string.s"
	
sys_kyb:
	push ax
	push cx
	in al, 0x60 		;get Scan Code from PS/2 Data Port
	mov cx, cs		;mov cx to ds
	mov ds, cx
	mov di, scann_code	;set offset for scanncode
	xor ah, ah
	add di, ax		;add scanncode to offset
	xor dx, dx
	mov dl, [di]		;mov ascii code to dl
	pop cx
	pop ax
	ret 


scann_code:
	db 0x00, 0x00, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x30, 0xE1, 0xB4, 0x08, 0x00
	db 0x51, 0x57, 0x45, 0x52, 0x54, 0x5A, 0x55, 0x49, 0x4F, 0x50, 0x9A, 0x2b, 0x00, 0x00,
	db 0x41, 0x53, 0x44, 0x46, 0x47, 0x48, 0x4A, 0x4B, 0x4C, 0x94, 0x84, 0x23, 0x00, 0x00,
	db 0x59, 0x58, 0x43, 0x56, 0x42, 0x4E, 0x4D, 0x2C, 0x2E, 0x2D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00

sys_reset_counter:
	pusha
	mov bx, ds
	mov ax, 0x0000
	mov ds, ax
	mov di, 0x046C
	mov [di], word 0x0000
	mov ds, bx
	popa
	ret


T_REG:
	db "A ", 0xff
	db "B ", 0xff
	db "C ", 0xff
	db "D ", 0xff 


sys_set_reg:
	mov di, T_REG
	call screen_print_string
	call screen_get_hex_w
	push ax
	call screen_print_nl
	add di, 0x3
	call screen_print_string
	call screen_get_hex_w
	push ax
	call screen_print_nl
	add di, 0x3
	call screen_print_string
	call screen_get_hex_w
	push ax
	call screen_print_nl
	add di, 0x3
	call screen_print_string
	call screen_get_hex_w
	push ax
	pop dx
	pop cx
	pop bx
	pop ax
	ret


sys_delay:						;eax = 1  ==> 0.01s
	pusha
	push ax						;save ax
	mov ax, 0x9C2E					;set pit to 100hz 1193180 / hz [lo-hi]
	call pit_set					
	pop ax						;restore ax	
	mov word [cs:PIT_V_COUNTER], 0			;reset counter
sys_delay_loop:
	cmp ax, [cs:PIT_V_COUNTER]			;if counter = ax then exit
	je sys_delay_exit
	jmp sys_delay_loop				;loop
sys_delay_exit:						;exit
	popa						
	ret


sys_error:
	mov ax, cs
	mov ds, ax	
	mov di, T_ERROR
	call screen_print_string
	jmp $


T_ERROR:	db "ERROR",0xff
T_GOOD:		db "GOOD",0xff

sys_prnd:
	mov eax, [V_PRND_SEED]		;eax = x
	imul eax, 1103515245		;eax = eax * 1103515245
	add eax, 12345			;eax = eax + 12345
	mov [V_PRND_SEED], eax
	ret

V_PRND_SEED:
	dd 0x1
